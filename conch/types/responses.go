package types

import "time"

// Build is a struct
// generated by "schematyper -o types/ResponseType_Build.go --package=types --ptr-for-omit Build.json" -- DO NOT EDIT
type Build struct {
	Admins                UsersTerse                    `json:"admins,omitempty"`
	Completed             time.Time                     `json:"completed"`
	CompletedUser         UserTerse                     `json:"completed_user,omitempty"`
	Created               time.Time                     `json:"created"`
	Description           string                        `json:"description"`
	DeviceHealth          map[string]NonNegativeInteger `json:"device_health,omitempty"`
	DevicePhases          map[string]NonNegativeInteger `json:"device_phases,omitempty"`
	ID                    UUID                          `json:"id"`
	Name                  MojoStandardPlaceholder       `json:"name"`
	RackPhases            map[string]NonNegativeInteger `json:"rack_phases,omitempty"`
	Started               time.Time                     `json:"started"`
	RoleViaOrganizationID UUID                          `json:"role_via_organization_id,omitempty"`
	Links                 []Link                        `json:"links"`
}

// UserTerse  is a struct
type UserTerse struct {
	Email EmailAddress `json:"email"`
	ID    UUID         `json:"id"`
	Name  string       `json:"name"`
}

// UsersTerse  is a slice of UserTerse structs
type UsersTerse []UserTerse

// BuildOrganizations  is a slice of BuildOrganization structs
// generated by "schematyper -o types/ResponseType_BuildOrganizations.go --package=types --ptr-for-omit BuildOrganizations.json" -- DO NOT EDIT
type BuildOrganizations []BuildOrganization

// BuildOrganization is a struct
type BuildOrganization struct {
	ID          UUID       `json:"id"`
	Name        string     `json:"name"`
	Description string     `json:"description"`
	Admins      UsersTerse `json: "admins"`
	Role        Role       `json:"role"`
}

// Builds  is a slice of Build structs
// generated by "schematyper -o types/ResponseType_Builds.go --package=types --ptr-for-omit Builds.json" -- DO NOT EDIT
type Builds []Build

// BuildUser is a struct
// generated by "schematyper -o types/ResponseType_BuildUsers.go --package=types --ptr-for-omit BuildUsers.json" -- DO NOT EDIT
type BuildUser struct {
	Email EmailAddress `json:"email"`
	ID    UUID         `json:"id"`
	Name  string       `json:"name"`
	Role  Role         `json:"role"`
}

// BuildUsers is a slice of BuildUser structs
type BuildUsers []BuildUser

// DatacenterRoomDetailed  is a struct
// generated by "schematyper -o types/ResponseType_DatacenterRoomsDetailed.go --package=types --ptr-for-omit DatacenterRoomsDetailed.json" -- DO NOT EDIT
type DatacenterRoomDetailed struct {
	Alias        MojoStandardPlaceholder `json:"alias"`
	AZ           string                  `json:"az"`
	Created      time.Time               `json:"created"`
	DatacenterID UUID                    `json:"datacenter_id"`
	ID           UUID                    `json:"id"`
	Updated      time.Time               `json:"updated"`
	VendorName   MojoRelaxedPlaceholder  `json:"vendor_name"`
}

// DatacenterRoomsDetailed  is a slice of DatacenterRoomDetailed structs
type DatacenterRoomsDetailed []DatacenterRoomDetailed

// Datacenter is a struct
// generated by "schematyper -o types/ResponseType_Datacenters.go --package=types --ptr-for-omit Datacenters.json" -- DO NOT EDIT
type Datacenter struct {
	Created    time.Time `json:"created"`
	ID         UUID      `json:"id"`
	Location   string    `json:"location"`
	Region     string    `json:"region"`
	Updated    time.Time `json:"updated"`
	Vendor     string    `json:"vendor"`
	VendorName string    `json:"vendor_name"`
}

// Datacenters is a slice of Datacenter structs
type Datacenters []Datacenter

// DetailedDevice is a struct
// generated by "schematyper -o types/ResponseType_DetailedDevice.go --package=types --ptr-for-omit DetailedDevice.json" -- DO NOT EDIT
type DetailedDevice struct {
	AssetTag          DeviceAssetTag          `json:"asset_tag"`
	BuildID           UUID                    `json:"build_id"`
	BuildName         string                  `json:"build_name"`
	Created           time.Time               `json:"created"`
	Disks             []DetailedDeviceDisk    `json:"disks,omitempty"`
	HardwareProductID UUID                    `json:"hardware_product_id"`
	Health            DeviceHealth            `json:"health"`
	Hostname          string                  `json:"hostname"`
	ID                UUID                    `json:"id"`
	LastSeen          time.Time               `json:"last_seen"`
	LatestReport      DeviceReport            `json:"latest_report"`
	Links             []DetailedDeviceLink    `json:"links"`
	Location          DeviceLocation          `json:"location,omitempty"`
	Nics              []Nic                   `json:"nics,omitempty"`
	Phase             DevicePhase             `json:"phase"`
	SerialNumber      DeviceSerialNumber      `json:"serial_number"`
	Sku               MojoStandardPlaceholder `json:"sku"`
	SystemUUID        UUID                    `json:"system_uuid"`
	Updated           time.Time               `json:"updated"`
	UptimeSince       time.Time               `json:"uptime_since"`
	Validated         time.Time               `json:"validated"`
}

// DetailedDeviceDisk is a struct
type DetailedDeviceDisk struct {
	Created      time.Time        `json:"created"`
	DriveType    interface{}      `json:"drive_type"`
	Enclosure    int              `json:"enclosure"`
	Firmware     interface{}      `json:"firmware"`
	Hba          interface{}      `json:"hba,omitempty"`
	Health       interface{}      `json:"health"`
	ID           UUID             `json:"id"`
	Model        interface{}      `json:"model"`
	SerialNumber DiskSerialNumber `json:"serial_number"`
	Size         interface{}      `json:"size"`
	Slot         int              `json:"slot"`
	Transport    interface{}      `json:"transport"`
	Updated      time.Time        `json:"updated"`
	Vendor       interface{}      `json:"vendor"`
}

// DetailedDeviceLink is a string
type DetailedDeviceLink string

// DeviceInterfaceName is a string
type DeviceInterfaceName string

// DeviceReportV300 is a struct that contains the contents of a posted device
// report from relays and reporters
type DeviceReportV300 struct {
	BiosVersion  string                          `json:"bios_version"`
	Cpus         []CpusItem                      `json:"cpus,omitempty"`
	DeviceType   string                          `json:"device_type,omitempty"`
	Dimms        []Dimm                          `json:"dimms,omitempty"`
	Disks        map[string]DeviceReportV300Disk `json:"disks,omitempty"`
	Interfaces   map[string]Interface            `json:"interfaces,omitempty"`
	Links        []DeviceReportV300Link          `json:"links,omitempty"`
	Os           *Os                             `json:"os,omitempty"`
	ProductName  string                          `json:"product_name"`
	Relay        *Relay                          `json:"relay,omitempty"`
	SerialNumber DeviceSerialNumber              `json:"serial_number"`
	Sku          string                          `json:"sku"`
	SystemUUID   UUID                            `json:"system_uuid"`
	Temp         *Temp                           `json:"temp,omitempty"`
	UptimeSince  string                          `json:"uptime_since,omitempty"`
}

// DeviceReportV300Disk is a struct of Disk data
type DeviceReportV300Disk struct {
	BlockSz   int             `json:"block_sz,omitempty"`
	DriveType string          `json:"drive_type,omitempty"`
	Enclosure IntOrStringyInt `json:"enclosure,omitempty"`
	Firmware  string          `json:"firmware,omitempty"`
	Hba       IntOrStringyInt `json:"hba,omitempty"`
	Health    string          `json:"health,omitempty"`
	Model     string          `json:"model,omitempty"`
	Size      int             `json:"size,omitempty"`
	Slot      IntOrStringyInt `json:"slot,omitempty"`
	Temp      IntOrStringyInt `json:"temp,omitempty"`
	Transport string          `json:"transport,omitempty"`
	Vendor    string          `json:"vendor,omitempty"`
}

// DeviceReportV300Link is a strign
type DeviceReportV300Link string

// Nic is a strut
type Nic struct {
	IfaceName   DeviceInterfaceName `json:"iface_name"`
	IfaceType   string              `json:"iface_type,omitempty"`
	IfaceVendor string              `json:"iface_vendor"`
	Mac         Macaddr             `json:"mac"`
	PeerMac     interface{}         `json:"peer_mac"`
	PeerPort    interface{}         `json:"peer_port"`
	PeerSwitch  interface{}         `json:"peer_switch"`
}

// DeviceBuild is a blob of data
// generated by "schematyper -o types/ResponseType_DeviceBuild.go --package=types --ptr-for-omit DeviceBuild.json" -- DO NOT EDIT
type DeviceBuild interface{}

// DeviceHardware is a blob of data
// generated by "schematyper -o types/ResponseType_DeviceHardware.go --package=types --ptr-for-omit DeviceHardware.json" -- DO NOT EDIT
type DeviceHardware interface{}

// DeviceLocationUpdate is a blob of data
// generated by "schematyper -o types/ResponseType_DeviceLocationUpdate.go --package=types --ptr-for-omit DeviceLocationUpdate.json" -- DO NOT EDIT
type DeviceLocationUpdate interface{}

// DeviceNicField is struct
// generated by "schematyper -o types/ResponseType_DeviceNicField.go --package=types --ptr-for-omit DeviceNicField.json" -- DO NOT EDIT
type DeviceNicField struct {
	DeviceNicFields
	DeviceNicFieldEmbedded1
	DeviceNicFieldEmbedded2
}

// DeviceNicFieldEmbedded1 is a map of strings to data
type DeviceNicFieldEmbedded1 map[string]interface{}

// DeviceNicFieldEmbedded2 is blob of data
type DeviceNicFieldEmbedded2 interface{}

// DeviceNicFields is a struct
type DeviceNicFields struct {
	DeviceID    UUID                `json:"device_id,omitempty"`
	IfaceDriver string              `json:"iface_driver,omitempty"`
	IfaceName   DeviceInterfaceName `json:"iface_name,omitempty"`
	IfaceType   string              `json:"iface_type,omitempty"`
	IfaceVendor string              `json:"iface_vendor,omitempty"`
	Ipaddr      Ipaddr              `json:"ipaddr,omitempty"`
	MAC         Macaddr             `json:"mac,omitempty"`
	MTU         string              `json:"mtu,omitempty"`
	State       string              `json:"state,omitempty"`
}

// DeviceNic is a struct
// generated by "schematyper -o types/ResponseType_DeviceNics.go --package=types --ptr-for-omit DeviceNics.json" -- DO NOT EDIT
type DeviceNic struct {
	DeviceNicFields
	DeviceNicEmbedded1
}

// DeviceNicEmbedded1  is a map of strings to data
type DeviceNicEmbedded1 map[string]interface{}

// DeviceNics is a slice of DeviceNic structs
type DeviceNics []DeviceNic

// DevicePXE is a struct
// generated by "schematyper -o types/ResponseType_DevicePXE.go --package=types --ptr-for-omit DevicePXE.json" -- DO NOT EDIT
type DevicePXE struct {
	ID       UUID        `json:"id"`
	Ipmi     interface{} `json:"ipmi"`
	Location interface{} `json:"location,omitempty"`
	Phase    DevicePhase `json:"phase"`
	Pxe      interface{} `json:"pxe"`
}

// TargetHardwareProduct is a struct that details of the hardware product the
// device is expected to be based on its current position and the rack layout.
type TargetHardwareProduct struct {
	Alias            string                  `json:"alias"`
	HardwareVendorID UUID                    `json:"hardware_vendor_id"`
	ID               UUID                    `json:"id"`
	Name             string                  `json:"name"`
	Sku              MojoStandardPlaceholder `json:"sku"`
}

// DeviceLocation is a struct
// generated by "schematyper -o types/ResponseType_DevicePXEs.go --package=types --ptr-for-omit DevicePXEs.json" -- DO NOT EDIT
type DeviceLocation struct {
	Az                    string                  `json:"az"`
	DatacenterRoom        MojoStandardPlaceholder `json:"datacenter_room"`
	Rack                  MojoRelaxedPlaceholder  `json:"rack"`
	RackUnitStart         PositiveInteger         `json:"rack_unit_start"`
	TargetHardwareProduct TargetHardwareProduct   `json:"target_hardware_product"`
}

// DevicePxe is a struct
type DevicePxe struct {
	ID       UUID        `json:"id"`
	Ipmi     interface{} `json:"ipmi"`
	Location interface{} `json:"location,omitempty"`
	Phase    DevicePhase `json:"phase"`
	Pxe      interface{} `json:"pxe"`
}

// DevicePxes is a slice of DevicePXE structs
type DevicePxes []DevicePxe

// DeviceReportRow is a struct
// generated by "schematyper -o types/ResponseType_DeviceReportRow.go --package=types --ptr-for-omit DeviceReportRow.json" -- DO NOT EDIT
type DeviceReportRow struct {
	Created  time.Time        `json:"created"`
	DeviceID UUID             `json:"device_id"`
	ID       UUID             `json:"id"`
	Report   DeviceReportV300 `json:"report"`
}

// DeviceSetting is a string
// generated by "schematyper -o types/ResponseType_DeviceSettings.go --package=types --ptr-for-omit DeviceSettings.json" -- DO NOT EDIT
type DeviceSetting string

// DeviceSettings is a map of string to DeviceSetting
type DeviceSettings map[string]DeviceSetting

// Device is a struct
// generated by "schematyper -o types/ResponseType_Devices.go --package=types --ptr-for-omit Devices.json" -- DO NOT EDIT
type Device struct {
	AssetTag          DeviceAssetTag          `json:"asset_tag"`
	BuildID           UUID                    `json:"build_id"`
	BuildName         string                  `json:"build_name"`
	Created           time.Time               `json:"created"`
	HardwareProductID UUID                    `json:"hardware_product_id"`
	Health            DeviceHealth            `json:"health"`
	Hostname          string                  `json:"hostname"`
	ID                UUID                    `json:"id"`
	LastSeen          time.Time               `json:"last_seen"`
	Links             []Link                  `json:"links"`
	Phase             DevicePhase             `json:"phase"`
	RackID            UUID                    `json:"rack_id,omitempty"`
	RackName          string                  `json:"rack_name,omitempty"`
	RackUnitStart     string                  `json:"rack_unit_start,omitempty"`
	SerialNumber      DeviceSerialNumber      `json:"serial_number"`
	Sku               MojoStandardPlaceholder `json:"sku"`
	SystemUUID        UUID                    `json:"system_uuid"`
	Updated           time.Time               `json:"updated"`
	UptimeSince       time.Time               `json:"uptime_since"`
	Validated         time.Time               `json:"validated"`
}

// Devices is a slice of Device structs
type Devices []Device

// DeviceSku is a struct
// generated by "schematyper -o types/ResponseType_DeviceSku.go --package=types --ptr-for-omit DeviceSku.json" -- DO NOT EDIT
type DeviceSku struct {
	HardwareProductID UUID                    `json:"hardware_product_id"`
	ID                UUID                    `json:"id"`
	Sku               MojoStandardPlaceholder `json:"sku"`
}

// HardwareProduct is a struct
// generated by "schematyper -o types/ResponseType_HardwareProducts.go --package=types --ptr-for-omit HardwareProducts.json" -- DO NOT EDIT
type HardwareProduct struct {
	Alias          MojoStandardPlaceholder `json:"alias"`
	Created        time.Time               `json:"created"`
	GenerationName string                  `json:"generation_name"`
	ID             UUID                    `json:"id"`
	Name           MojoStandardPlaceholder `json:"name"`
	SKU            MojoStandardPlaceholder `json:"sku"`
	Updated        time.Time               `json:"updated"`
}

// HardwareProducts is a slice of HardwareProduct structs
type HardwareProducts []HardwareProduct

// HardwareVendor is a struct
// generated by "schematyper -o types/ResponseType_HardwareVendor.go --package=types --ptr-for-omit HardwareVendor.json" -- DO NOT EDIT
type HardwareVendor struct {
	Created time.Time               `json:"created"`
	ID      UUID                    `json:"id"`
	Name    MojoStandardPlaceholder `json:"name"`
	Updated time.Time               `json:"updated"`
}

// HardwareVendors is a slice of HardwareVendor structs
type HardwareVendors []HardwareVendor

// LoginToken is a struct
// generated by "schematyper -o types/ResponseType_LoginToken.go --package=types --ptr-for-omit LoginToken.json" -- DO NOT EDIT
type LoginToken struct {
	JwtToken string `json:"jwt_token"`
}

// Organization is a struct
// generated by "schematyper -o types/ResponseType_Organization.go --package=types --ptr-for-omit Organization.json" -- DO NOT EDIT
type Organization struct {
	Builds      []Build                 `json:"builds"`
	Created     time.Time               `json:"created"`
	Description string                  `json:"description"`
	ID          UUID                    `json:"id"`
	Name        MojoStandardPlaceholder `json:"name"`
	Users       UsersTerse              `json:"users"`
	Role        Role                    `json:"role,omitempty"`
}

// Organizations is a slice of Organization structs
type Organizations []Organization

// Ping is a struct
// generated by "schematyper -o types/ResponseType_Ping.go --package=types --ptr-for-omit Ping.json" -- DO NOT EDIT
type Ping struct {
	Status interface{} `json:"status"`
}

// DeviceAssetTag is a string
// generated by "schematyper -o types/ResponseType_Racks.go --package=types --ptr-for-omit Racks.json" -- DO NOT EDIT
type DeviceAssetTag string

// Rack is a struct
type Rack struct {
	AssetTag            DeviceAssetTag          `json:"asset_tag"`
	BuildID             UUID                    `json:"build_id"`
	BuildName           interface{}             `json:"build_name"`
	Created             time.Time               `json:"created"`
	DatacenterRoomAlias MojoStandardPlaceholder `json:"datacenter_room_alias"`
	DatacenterRoomID    UUID                    `json:"datacenter_room_id"`
	FullRackName        MojoRelaxedPlaceholder  `json:"full_rack_name"`
	ID                  UUID                    `json:"id"`
	Name                MojoRelaxedPlaceholder  `json:"name"`
	Phase               DevicePhase             `json:"phase"`
	RackRoleID          UUID                    `json:"rack_role_id"`
	RackRoleName        MojoStandardPlaceholder `json:"rack_role_name"`
	SerialNumber        DeviceSerialNumber      `json:"serial_number"`
	Updated             time.Time               `json:"updated"`
}

// Racks is a slice of Rack structs
type Racks []Rack

// Relay is a struct
// generated by "schematyper -o types/ResponseType_Relays.go --package=types --ptr-for-omit Relays.json" -- DO NOT EDIT
type Relay struct {
	Created      time.Time         `json:"created,omitempty"`
	ID           UUID              `json:"id,omitempty"`
	Ipaddr       Ipaddr            `json:"ipaddr,omitempty"`
	LastSeen     time.Time         `json:"last_seen,omitempty"`
	Name         string            `json:"name,omitempty"`
	SSHPort      PositiveInteger   `json:"ssh_port,omitempty"`
	SerialNumber RelaySerialNumber `json:"serial_number"`
	Updated      time.Time         `json:"updated,omitempty"`
	UserID       UUID              `json:"user_id,omitempty"`
	Version      string            `json:"version,omitempty"`
}

// Relays is a slice of Relay structs
type Relays []Relay

// RelaySerialNumber is a string
type RelaySerialNumber string

// ReportValidationResults is a struct
// generated by "schematyper -o types/ResponseType_ReportValidationResults.go --package=types --ptr-for-omit ReportValidationResults.json" -- DO NOT EDIT
type ReportValidationResults struct {
	DeviceSerialNumber DeviceSerialNumber      `json:"device_serial_number"`
	HardwareProductID  UUID                    `json:"hardware_product_id"`
	Results            ValidationResults       `json:"results"`
	Sku                MojoStandardPlaceholder `json:"sku"`
	Status             ValidationStatus        `json:"status"`
}

// Role is a struct that corresponds to role_enum in the database
// generated by "schematyper -o ResponseType_UserDetailed.go --package=types --ptr-for-omit UserDetailed.json" -- DO NOT EDIT
type Role string

// UserDetailed is a struct
type UserDetailed struct {
	Builds              Builds        `json:"builds"`
	Created             time.Time     `json:"created"`
	Email               EmailAddress  `json:"email"`
	ForcePasswordChange bool          `json:"force_password_change"`
	ID                  UUID          `json:"id"`
	IsAdmin             bool          `json:"is_admin"`
	LastLogin           time.Time     `json:"last_login"`
	LastSeen            time.Time     `json:"last_seen"`
	Name                string        `json:"name"`
	Organizations       Organizations `json:"organizations"`
	RefuseSessionAuth   bool          `json:"refuse_session_auth"`
}

// Users is a slice of structs
type Users []struct {
	Created             time.Time    `json:"created"`
	Email               EmailAddress `json:"email"`
	ForcePasswordChange bool         `json:"force_password_change"`
	ID                  UUID         `json:"id"`
	IsAdmin             bool         `json:"is_admin"`
	LastLogin           time.Time    `json:"last_login"`
	LastSeen            time.Time    `json:"last_seen"`
	Name                string       `json:"name"`
	RefuseSessionAuth   bool         `json:"refuse_session_auth"`
}

// UserSetting is a string
// generated by "schematyper -o ResponseType_UserSettings.go --package=types --ptr-for-omit UserSettings.json" -- DO NOT EDIT
type UserSetting string

// UserSettings is a map of string to UserSetting
type UserSettings map[string]UserSetting

// NewUserTokenResponse is a struct
// generated by "schematyper -o types/ResponseType_UserTokens.go --package=types --ptr-for-omit UserTokens.json" -- DO NOT EDIT
type NewUserTokenResponse struct {
	Name       string    `json:"name"`
	Created    time.Time `json:"created"`
	Expires    time.Time `json:"expires"`
	LastIpaddr Ipaddr    `json:"last_ipaddr"`
	LastUsed   time.Time `json:"last_used"`
	Token      string    `json:"token"`
}

// UserToken is a struct
type UserToken struct {
	Created    time.Time `json:"created"`
	Expires    time.Time `json:"expires"`
	LastIpaddr Ipaddr    `json:"last_ipaddr"`
	LastUsed   time.Time `json:"last_used"`
	Name       string    `json:"name"`
}

// UserTokens is a slice of UserToken structs
type UserTokens []UserToken

// ValidationPlan is a struct
// generated by "schematyper -o types/ResponseType_ValidationPlans.go --package=types --ptr-for-omit ValidationPlans.json" -- DO NOT EDIT
type ValidationPlan struct {
	Created     time.Time               `json:"created"`
	Description string                  `json:"description"`
	ID          UUID                    `json:"id"`
	Name        MojoStandardPlaceholder `json:"name"`
}

// ValidationPlans is a slice of ValidtionPlan structs
type ValidationPlans []ValidationPlan

// ValidationResult is a struct
// generated by "schematyper -o types/ResponseType_ValidationResults.go --package=types --ptr-for-omit ValidationResults.json" -- DO NOT EDIT
type ValidationResult struct {
	Category     string           `json:"category"`
	Component    string           `json:"component"`
	Hint         interface{}      `json:"hint"`
	ID           UUID             `json:"id"`
	Message      string           `json:"message"`
	Status       ValidationStatus `json:"status"`
	ValidationID UUID             `json:"validation_id"`
}

// ValidationResults is a slice of ValidationResult structs
type ValidationResults []ValidationResult

// ValidationStatus is a string that corresponds to validation_status_enum in
// the database
type ValidationStatus string

// Validation is a struct
// generated by "schematyper -o types/ResponseType_Validations.go --package=types --ptr-for-omit Validations.json" -- DO NOT EDIT
type Validation struct {
	Created     time.Time               `json:"created"`
	Deactivated interface{}             `json:"deactivated"`
	Description string                  `json:"description"`
	ID          UUID                    `json:"id"`
	Name        MojoStandardPlaceholder `json:"name"`
	Updated     time.Time               `json:"updated"`
	Version     PositiveInteger         `json:"version"`
}

// Validations is a slice of Validation structs
type Validations []Validation

// ValidationStateWithResults is a struct
// generated by "schematyper -o types/ResponseType_ValidationStateWithResults.go --package=types --ptr-for-omit ValidationStateWithResults.json" -- DO NOT EDIT
type ValidationStateWithResults struct {
	Created           time.Time         `json:"created"`
	DeviceID          UUID              `json:"device_id"`
	DeviceReportID    UUID              `json:"device_report_id"`
	HardwareProductID UUID              `json:"hardware_product_id"`
	ID                UUID              `json:"id"`
	Status            ValidationStatus  `json:"status"`
	Results           ValidationResults `json:"results"`
}

// Version is a struct
// generated by "schematyper -o types/ResponseType_Version.go --package=types --ptr-for-omit Version.json" -- DO NOT EDIT
type Version struct {
	Version string `json:"version"`
}

// RackRole is a struct
// generated by "schematyper -o types/ResponseType_RackRoles.go --package=types --ptr-for-omit RackRoles.json" -- DO NOT EDIT
type RackRole struct {
	Created  time.Time               `json:"created"`
	ID       UUID                    `json:"id"`
	Name     MojoStandardPlaceholder `json:"name"`
	RackSize PositiveInteger         `json:"rack_size"`
	Updated  time.Time               `json:"updated"`
}

// RackRoles is a slice of RackRole structs
type RackRoles []RackRole

// RackLayout is a struct
type RackLayout struct {
	Created           time.Time               `json:"created"`
	HardwareProductID UUID                    `json:"hardware_product_id"`
	ID                UUID                    `json:"id"`
	RackID            UUID                    `json:"rack_id"`
	RackName          MojoRelaxedPlaceholder  `json:"rack_name"`
	RackUnitSize      PositiveInteger         `json:"rack_unit_size"`
	RackUnitStart     PositiveInteger         `json:"rack_unit_start"`
	Sku               MojoStandardPlaceholder `json:"sku"`
	Updated           time.Time               `json:"updated"`
}

// RackLayouts is a slice of RackLayout structs
type RackLayouts []RackLayout

// RackAssignment is a struct
type RackAssignment struct {
	DeviceAssetTag      DeviceAssetTag          `json:"device_asset_tag"`
	DeviceID            UUID                    `json:"device_id"`
	DeviceSerialNumber  DeviceSerialNumber      `json:"device_serial_number"`
	HardwareProductName string                  `json:"hardware_product_name"`
	RackUnitSize        PositiveInteger         `json:"rack_unit_size"`
	RackUnitStart       PositiveInteger         `json:"rack_unit_start"`
	Sku                 MojoStandardPlaceholder `json:"sku"`
}

// RackAssignments is a slice of RackAssignment structs
type RackAssignments []RackAssignment
